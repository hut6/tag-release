#!/usr/bin/env php
<?php

if(in_array('--self-update', $argv)) {
    run('curl -s -H "Cache-Control: no-cache" https://raw.githubusercontent.com/hut6/tag-release/master/tag-release > ' . escapeshellarg($_SERVER['SCRIPT_FILENAME']));
    die("Complete\n\n");
}

/* Check if style.css is minified */
if(!in_array('--force-css', $argv)) {
    $changes = `git status -s | grep 'css'`; // Look for style changes
    if(strstr($changes, '.scss') && ! strstr($changes, 'style.css')) { // Check if sass has changed but CSS hasn't
        die("SASS has changed, but not style.css. Did you forget to 'npm run css'? Use --force-css to ignore");
    }
    $cssLineCount = trim(`wc -l css/style.css | awk '{ print $1 }'`);
    if($cssLineCount > 100) {
        die("css/style.css has $cssLineCount lines. Did you forget to 'npm run css'? Use --force-css to ignore");
    }
}

/** Options */

$releases = array('fix', 'patch', 'minor', 'major');

$type = current(array_intersect($argv, $releases));

if(!$type) {
    die(usage());
}

if(`git status --porcelain`) {
    die("Working directory must be clean. Run 'git status'\n\n");
}

$force = in_array('--force', $argv);
$push = in_array('--push', $argv);

/* Check current branch */
$branch = trim(`git rev-parse --abbrev-ref HEAD`);

if($branch !== 'master' && !$force) {
    die("Can't release non-master branch '$branch'. Use '--force'.\n\n");
}

$versionFile = __DIR__ . '/../VERSION';

$version = file_get_contents($versionFile);


/**
 * @return string
 */
function usage(){
    return "Usage: bin/tag-release [patch|minor|major] [--push] [--force]\n"
    . "  --push    Also pushes branch and tags to origin\n"
    . "  --force   Applies release to non-master branch\n";
}

$version = incrementVersion($version, $type);

function run($cmd) {
    echo "$cmd\n";
    `$cmd`;
}

file_put_contents($versionFile, $version);
$message = escapeshellarg("Release $version: " . trim(`git log -1 --pretty=%B`));

run("git commit VERSION -m $message");
run("git tag -a $version -m 'Release $version'");


echo "Version is $version\n";

if($push) {
    run('git push origin master');
    run('git push origin --tags');
}

function incrementVersion($version, $type) {
    $bits = explode('.', $version);
    if(empty($bits[0])) {
        $bits[0] = 1;
    }
    if(empty($bits[1])) {
        $bits[1] = 0;
    }
    if(empty($bits[2])) {
        $bits[2] = 0;
    }

    if($type == 'fix' || $type == 'patch') {
        $bits[2] += 1;
    }
    elseif($type == 'minor') {
        $bits[1] += 1;
        $bits[2] = 0;
    }
    elseif($type == 'major') {
        $bits[0] += 1;
        $bits[1] = 0;
        $bits[2] = 0;
    }

    return implode('.', $bits);
}
